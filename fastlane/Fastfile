# Common lane to bump version in package.json
desc "Bump package.json version and return new version"
lane :bump_package_json_version do
  require 'json'

  package_json_path = File.expand_path("../package.json", __dir__)
  unless File.exist?(package_json_path)
    UI.user_error!("Error: package.json not found at #{package_json_path}")
  end

  package_json = JSON.parse(File.read(package_json_path))
  current_version = package_json["version"]

  if current_version.nil? || current_version.empty?
    UI.user_error!("Error: Version not found in package.json")
  end

  major, minor, patch = current_version.split('.').map(&:to_i)
  if patch < 9
    patch += 1
  else
    patch = 0
    minor += 1
  end

  new_version = "#{major}.#{minor}.#{patch}"
  package_json["version"] = new_version
  File.write(package_json_path, JSON.pretty_generate(package_json) + "\n")
  UI.success("Updated package.json version from #{current_version} â†’ #{new_version}")

  new_version
end

# Sync Android versionName with package.json
desc "Sync Android versionName"
lane :increment_android_build do |options|
  new_version = options[:version]
  gradle_file = File.expand_path("../android/app/build.gradle", __dir__)
  if File.exist?(gradle_file)
    gradle_content = File.read(gradle_file)
    gradle_content.gsub!(/versionName\s+"[\d.]+"?/, "versionName \"#{new_version}\"")
    File.write(gradle_file, gradle_content)
    UI.success("[Android] Synced versionName to #{new_version}")
  else
    UI.error("Error: build.gradle not found at #{gradle_file}")
  end
end

# Sync iOS CFBundleShortVersionString with package.json
desc "Sync iOS MARKETING_VERSION and CFBundleShortVersionString"
lane :increment_ios_build do |options|
  new_version = options[:version]
  pbxproj_path = "../ios/Boilerplate.xcodeproj/project.pbxproj"

  content = File.read(pbxproj_path)
  updated_content = content.gsub(/MARKETING_VERSION = [0-9.]+;/, "MARKETING_VERSION = #{new_version};")
  File.write(pbxproj_path, updated_content)
  UI.success("[iOS] Updated MARKETING_VERSION to #{new_version}")

  # Update Info.plist
  ios_plist_path = File.expand_path("../ios/Boilerplate/Info.plist", __dir__)
  if File.exist?(ios_plist_path)
    set_info_plist_value(
      path: ios_plist_path,
      key: "CFBundleShortVersionString",
      value: new_version
    )
    UI.success("[iOS] Synced Info.plist CFBundleShortVersionString to #{new_version}")
  else
    UI.error("Error: Info.plist not found at #{ios_plist_path}")
  end
end

# Sync both android and iOS lanes
desc "Increment version in package.json and sync to Android and iOS"
lane :sync_versions do
  new_version = bump_package_json_version
  increment_android_build(version: new_version)
  increment_ios_build(version: new_version)
end
