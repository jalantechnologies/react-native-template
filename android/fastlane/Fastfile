# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

  desc "Fetches the latest version code from the Play Console and increments it by 1"
  lane :fetch_and_increment_build_number do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    version_codes = google_play_track_version_codes(
      package_name: app_identifier,
      track: "production",
      json_key: ENV["ANDROID_JSON_KEY_FILE"]
    )
    
    updated_version_code = version_codes[0] + 1
    
    increment_version_code(
      version_code: updated_version_code
    )
  end

  desc "Sync version from package.json to Android and iOS"
lane :sync_versions do
  require 'json'

  # Read package.json
  package_json_path = File.expand_path("../../package.json", __dir__)

  if !File.exist?(package_json_path)
    UI.user_error!(" Error: package.json not found at #{package_json_path}")
  end

  package_json = JSON.parse(File.read(package_json_path))
  version = package_json["version"]

  if version.nil? || version.empty?
    UI.user_error!(" Error: Version not found in package.json")
  end

  # Android Version Update
  begin
    major, minor, patch = version.split('.').map(&:to_i)
    version_code = (major * 10000) + (minor * 100) + patch

    # Update Android versionCode
    increment_version_code(version_code: version_code)
    UI.success(" [Android] Synced version to #{version} (versionCode: #{version_code})")
  rescue => e
    UI.error(" [Android] Failed to update versionCode: #{e.message}")
  end

  # Update Android versionName in build.gradle
  gradle_file = File.expand_path("../app/build.gradle", __dir__)

  if File.exist?(gradle_file)
    gradle_content = File.read(gradle_file)
    new_gradle_content = gradle_content.gsub(/versionName\s*=\s*"[\d.]+"?/, "versionName = \"#{version}\"")
    File.write(gradle_file, new_gradle_content)
    UI.success(" [Android] Synced versionName to #{version} (versionCode: #{version_code})")
  else
    UI.error(" Error: build.gradle not found at #{gradle_file}")
  end

   # iOS Version Update
   begin
    ios_plist_path = File.expand_path("../../ios/Boilerplate/Info.plist", __dir__)

    if File.exist?(ios_plist_path)
      # Update CFBundleShortVersionString (versionName)
      set_info_plist_value(
        path: ios_plist_path,
        key: "CFBundleShortVersionString",
        value: version
      )

      # Update CFBundleVersion (build number)
      set_info_plist_value(
        path: ios_plist_path,
        key: "CFBundleVersion",
        value: version_code.to_s
      )

      UI.success(" [iOS] Synced version to #{version} (build number: #{version_code})")
    else
      UI.error(" [iOS] Info.plist not found at #{ios_plist_path}")
    end
  rescue => e
    UI.error(" [iOS] Failed to update version: #{e.message}")
  end
end

  desc "Deploy a new version to the Google Play"
  lane :deploy_android_production do

    fetch_and_increment_build_number

    gradle(
      task: "bundle",
      build_type: "release",
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
      }
    )
    
    upload_to_play_store(
      track: "production",
      json_key: ENV["ANDROID_JSON_KEY_FILE"],
      skip_upload_apk: true,
    )
  end
  desc "Deploy APK to Firebase App Distribution"
  lane :pr_deploy do |options|
    require 'uri'
    require 'net/http'
    require 'json'

    pr_number = options[:pr_number]
    pr_title = options[:pr_title]
    project_number = options[:project_number]
    app_id = options[:app_id]
    service_account_path = "/tmp/gcp_key.json"
    apk_path = File.expand_path("../app/build/outputs/apk/debug/app-debug.apk", __dir__)

    # Authenticate 
    sh("gcloud auth activate-service-account --key-file='#{service_account_path}'")
    access_token = Actions.sh("gcloud auth print-access-token", log: false).strip
    UI.message("✅ Access token fetched")

    ENV["GRADLE_OPTS"] = "-Xmx4g -XX:MaxMetaspaceSize=1g -Dfile.encoding=UTF-8"

    gradle(
      task: "assemble",
      build_type: "Debug",
      properties: {
        "org.gradle.daemon" => "false",
        "org.gradle.workers.max" => "2"
     },
      print_command: true,
      print_command_output: true
    )



    # Upload the APK binary
    upload_url = "https://firebaseappdistribution.googleapis.com/upload/v1/projects/#{project_number}/apps/#{app_id}/releases:upload"
    UI.message("🚀 Uploading APK to Firebase App Distribution...")

    uri = URI(upload_url)
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true

    apk_data = File.binread(apk_path)
    apk_filename = File.basename(apk_path)

    request = Net::HTTP::Post.new(uri)
    request["Authorization"] = "Bearer #{access_token}"
    request["X-Goog-Upload-Protocol"] = "raw"
    request["X-Goog-Upload-File-Name"] = apk_filename
    request.body = apk_data

    response = http.request(request)
    UI.message("Uploading to: #{upload_url}")
    if response.code.to_i != 200 && response.code.to_i != 201
      UI.user_error!("Failed to upload APK: #{response.code} - #{response.body}")
    end

    upload_response = JSON.parse(response.body)
    UI.message("✅ APK uploaded. Operation: #{upload_response['name']}")

    operation_name = upload_response["name"]
    operation_url = "https://firebaseappdistribution.googleapis.com/v1/#{operation_name}"

    max_tries = 10
    release_name = nil

    max_tries.times do |i|
      sleep(3)
      uri = URI(operation_url)
      request = Net::HTTP::Get.new(uri)
      request["Authorization"] = "Bearer #{access_token}"
      response = http.request(request)
      if response.code.to_i != 200
        UI.message("⏳ Waiting for operation to complete... Attempt #{i+1}")
        next
      end
      op_response = JSON.parse(response.body)
      if op_response["done"] && op_response["response"] && op_response["response"]["release"]
        release_name = op_response["response"]["release"]["name"]
        break
      end
    end

    unless release_name
      UI.user_error!("Timeout: Release not created after upload.")
    end

  UI.message("✅ Release created: #{release_name}")

  # Now patch the release to add release notes
  patch_url = "https://firebaseappdistribution.googleapis.com/v1/#{release_name}"
  uri = URI(patch_url)

  release_notes_text = "PR ##{pr_number}: #{pr_title} - Build uploaded on #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}"

  patch_body = {
    "releaseNotes" => {
      "text" => release_notes_text
    }
  }.to_json

  request = Net::HTTP::Patch.new(uri)
  request["Authorization"] = "Bearer #{access_token}"
  request["Content-Type"] = "application/json"
  request.body = patch_body

  response = http.request(request)

  if response.code.to_i != 200
    UI.user_error!("Failed to patch release: #{response.code} - #{response.body}")
  end

  UI.message("✅ Release updated with release notes for PR ##{pr_number}")
end


  desc "Clean up Firebase App Distribution releases for closed PR"
  lane :pr_cleanup do |options|
    project_number = options[:project_number]
    app_id = options[:app_id]
    pr_number = options[:pr_number]
    service_account_path = "/tmp/gcp_key.json"

    #Authenticate 
    Actions.sh("gcloud auth activate-service-account --key-file='#{service_account_path}'")
    access_token = Actions.sh("gcloud auth print-access-token", log: false).strip
    UI.message("✅ Access token fetched")

    #Get all releases
    releases_url = "https://firebaseappdistribution.googleapis.com/v1/projects/#{project_number}/apps/#{app_id}/releases"
    UI.message("📥 Fetching releases from: #{releases_url}")

    uri = URI(releases_url)
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true

    request = Net::HTTP::Get.new(uri)
    request["Authorization"] = "Bearer #{access_token}"

    response = http.request(request)

    if response.code.to_i != 200
      UI.user_error!("Failed to fetch releases: #{response.code} #{response.body}")
    end

    releases_json = response.body
    releases = JSON.parse(releases_json)

    matched_release_names = []

    releases["releases"]&.each do |release|
      notes = release.dig("releaseNotes", "text") || ""
      if notes.include?("PR ##{pr_number}")
        matched_release_names << release["name"]
      end
    end

    if matched_release_names.empty?
      UI.message("⚠️ No releases found for PR ##{pr_number}")
      return
    end

    UI.message("🗑️ Found #{matched_release_names.size} releases to delete")

    # Step 3: Call batchDelete API
    batch_delete_url = "https://firebaseappdistribution.googleapis.com/v1/projects/#{project_number}/apps/#{app_id}/releases:batchDelete"
    body = { names: matched_release_names }.to_json

    token = access_token
    body_json = body

    command = %Q(
      curl -s -X POST "#{batch_delete_url}" \\
      -H "Authorization: Bearer #{token}" \\
      -H "Content-Type: application/json" \\
      -d '#{body_json}'
    )

    output = `#{command}`

    UI.message("API call completed.")
    UI.message("✅ Response from batchDelete: #{response}")
  end
end