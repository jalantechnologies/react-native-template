name: preview_on_pr_update

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: analyze
    # only run when updating an 'Open' PR
    if: github.event.pull_request.state == 'open'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: sonarqube-scan-pullrequest
        uses: sonarsource/sonarqube-scan-action@master
        if: ${{ github.base_ref == 'main' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.pullrequest.key=${{ github.event.number }}
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=1000

  build:
    runs-on: ubuntu-latest
    outputs:
      image_ref: ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/boilerplate-react-native@${{ steps.build.outputs.image_digest }}
    steps:
      - name: Checkout (app)
        uses: actions/checkout@v3
        # make sure to keep checked in code at different directory to avoid colliding with docker caching
        with:
          path: app

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          BRANCH_NAME=$(echo ${{ github.event.pull_request.head.ref }} | sed -e 's/^refs\/heads\///g')
          BRANCH_HASH=$(sha1sum < <(printf '%s' $BRANCH_NAME) | cut -c -15)

          echo "##[set-output name=branch_hash;]$(echo $BRANCH_HASH)"

      - name: Inject Doppler secrets
        uses: ./app/.github/actions/inject_doppler_secrets
        with:
          doppler_token: ${{ secrets.DOPPLER_PREVIEW_TOKEN }}
          working_directory: app

      - name: Build application
        id: build
        uses: ./app/.github/actions/build
        with:
          tags: ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/boilerplate-react-native:${{ steps.extract_branch.outputs.branch_hash }}
          build_args: NODE_CONFIG_ENV=preview
          build_secrets: ''
          context: app/
          docker_registry: ${{ vars.DOCKER_REGISTRY }}
          docker_username: ${{ vars.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
  
  checks:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      # turn off fail fast, let all the checks run irrespective of failures
      fail-fast: false
      matrix:
        check: ['yarn:lint', 'compose:test']
    steps:
      - name: Checkout (app)
        uses: actions/checkout@v3
        with:
          path: app

      - name: Inject Doppler secrets
        uses: ./app/.github/actions/inject_doppler_secrets
        with:
          doppler_token: ${{ secrets.DOPPLER_PREVIEW_TOKEN }}
          working_directory: app
          
      - name: Run check
        uses: ./app/.github/actions/check
        with:
          check: ${{ matrix.check }}
          image: ${{ needs.build.outputs.image_ref }}
          tag: boilerplate-react-native
          docker_registry: ${{ vars.DOCKER_REGISTRY }}
          docker_username: ${{ vars.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}

  deploy_android_preview:
    name: Deploy Android to Firebase
    needs: checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (root for actions)
        uses: actions/checkout@v3

      - name: Checkout (app code)
        uses: actions/checkout@v3
        with:
          path: app

      - name: Deploy android app to Firebase App Distribution
        uses: ./.github/actions/deploy_android_preview
        with:
          ANDROID_GCP_JSON_BASE64: ${{ secrets.ANDROID_GCP_JSON_BASE64 }}
          ANDROID_FIREBASE_PROJECT_NUMBER: ${{ secrets.ANDROID_FIREBASE_PROJECT_NUMBER }}
          ANDROID_FIREBASE_APP_ID: ${{ secrets.ANDROID_FIREBASE_APP_ID }}
          ANDROID_FIREBASE_PROJECT_ID: ${{ secrets.ANDROID_FIREBASE_PROJECT_ID }}
          ANDROID_FIREBASE_APP_PACKAGE: ${{ secrets.ANDROID_FIREBASE_APP_PACKAGE }}
          ANDROID_FIREBASE_API_KEY: ${{ secrets.ANDROID_FIREBASE_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}

  deploy_ios_preview:
    needs: [checks]
    if: github.event.action != 'closed'
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy iOS Preview to TestFlight
        uses: ./.github/actions/deploy_ios_preview
        env:
          MATCH_PASSWORD: ${{ secrets.IOS_MATCH_PASSWORD }}
          IOS_MATCH_REPOSITORY_URL: ${{ secrets.IOS_MATCH_REPOSITORY_URL }}
          IOS_APPLE_ID: ${{ secrets.IOS_APPLE_ID }}
          IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
          IOS_APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.IOS_APP_STORE_CONNECT_API_KEY_ID }}
          IOS_APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.IOS_APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          IOS_APP_STORE_CONNECT_API_KEY_B64: ${{ secrets.IOS_APP_STORE_CONNECT_API_KEY_B64 }}
          IOS_APP_IDENTIFIER: ${{ secrets.IOS_APP_IDENTIFIER }}
          IOS_APP_STORE_TEAM_ID: ${{ secrets.IOS_APP_STORE_TEAM_ID }}
          IOS_DEV_EMAIL: ${{ secrets.IOS_DEV_EMAIL }}
          IOS_MATCH_DEPLOY_KEY: ${{ secrets.IOS_MATCH_DEPLOY_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
