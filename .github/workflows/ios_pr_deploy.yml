name: iOS PR Deploy

on:
  push:
    branches:
      - shivam/ios/preview-deployment

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 30
    env:
      NO_FLIPPER: 1

    steps:
      - uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1

      - name: Install Bundler
        run: gem install bundler
      
      - name: Install Ruby dependencies
        working-directory: ios
        run: bundle install
      
      - name: Use Node.js 22.13.1
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install

      - name: Remove Flipper dependencies (hard cleanup)
        run: |
          rm -rf node_modules/react-native-flipper ios/Pods/Flipper* || true
          yarn install --check-files || true

      - name: Patch Boost Podspec with Custom Source
        working-directory: node_modules/react-native/third-party-podspecs
        run: |
          awk '
          /spec.source/ {
          print "  spec.source = { :http => '\''https://archives.boost.io/release/1.76.0/source/boost_1_76_0.tar.gz'\'', :sha256 => '\''7bd7ddceec1a1dfdcbdb3e609b60d01739c38390a5f956385a12f3122049f0ca'\'' }";
          skip=1; next
          }
          skip && /\}/ { skip=0; next }
          skip && /:sha256/ { next }
          { print }
          ' boost.podspec > boost.podspec.tmp && mv boost.podspec.tmp boost.podspec

      - name: Install CocoaPods dependencies
        working-directory: ios
        run: |
          rm -f Podfile.lock
          bundle exec pod install --repo-update
      
      - name: Remove [CP] Embed Pods Frameworks build phase
        working-directory: ios
        run: |
          gem install xcodeproj
          ruby -e "
          require 'xcodeproj';
          project_path = 'Boilerplate.xcodeproj';
          project = Xcodeproj::Project.open(project_path);
          target = project.targets.find { |t| t.name == 'Boilerplate' };
          target.build_phases.delete_if { |bp| bp.display_name.include?('[CP] Embed Pods Frameworks') };
          project.save;
          puts '‚úÖ Removed [CP] Embed Pods Frameworks phase';
          "

      # - name: Patch Embed Pods Frameworks to Set Dummy Output
      #   working-directory: ios
      #   run: |
      #     EMBED_SCRIPT="Pods/Target Support Files/Pods-Boilerplate/Pods-Boilerplate-frameworks.sh"
      #     if [ -f "$EMBED_SCRIPT" ]; then
      #       echo 'export SCRIPT_OUTPUT_FILE_0=/tmp/dummy_output' >> "$EMBED_SCRIPT"
      #       echo "‚úÖ Added dummy output to avoid hang"
      #     else
      #       echo "‚ö†Ô∏è Embed script not found, skipping"
      #     fi

      - name: Set up SSH for Match
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.MATCH_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "GIT_SSH_COMMAND=ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" >> $GITHUB_ENV
      
      - name: Check for Flipper in Podfile.lock
        run: |
          grep -i flipper ios/Podfile.lock && echo "‚ùå Flipper still present!" && exit 1 || echo "‚úÖ Flipper not found"

      - name: Install code signing certificates via Match
        working-directory: ios
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        run: |
          echo "üîê Installing certs..."
          bundle exec fastlane ci_signing_setup

      - name: Unlock login keychain
        run: |
          security unlock-keychain -p "" ~/Library/Keychains/login.keychain-db

      - name: Debug installed identities
        run: |
          echo "üïµÔ∏è Debugging code signing identities..."
          security find-identity -v -p codesigning
          security list-keychains

      - name: iOS PR Deploy to TestFlight
        working-directory: ios
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          NO_FLIPPER: 1
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        run: |
          echo "MATCH_PASSWORD=${MATCH_PASSWORD:0:4}****"
          bundle exec fastlane ios pr_deploy

      - name: Print last 100 lines of Xcode log
        if: failure()
        run: |
          tail -n 100 ~/Library/Logs/gym/Boilerplate-Boilerplate.log || echo "Log not found"